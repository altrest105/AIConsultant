import os
import re
import io
import tempfile
import logging
import torch
from django.conf import settings
from TTS.api import TTS
from django.conf import settings
from pydub import AudioSegment

logger = logging.getLogger(__name__)

TTS_MODEL = None


def get_model():
    global TTS_MODEL
    
    if TTS_MODEL is not None:
        return TTS_MODEL
    
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ TTS –º–æ–¥–µ–ª–∏...")

        model_name = settings.TTS_CONFIG.get("MODEL_NAME", "tts_models/multilingual/multi-dataset/xtts_v2")
        device = "cuda" if torch.cuda.is_available() else "cpu"

        TTS_MODEL = TTS(model_name=model_name)
        TTS_MODEL.to(device)
        logger.info(f"‚úÖ TTS –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS –º–æ–¥–µ–ª–∏: {e}")
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TTS –º–æ–¥–µ–ª—å")
    
    return TTS_MODEL


def split_text_into_sentences(text):
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–æ—á–∫–µ, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É –∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –∑–Ω–∞–∫–∞–º
    sentences = re.split(r'([.!?]+)', text)
    
    result = []
    for i in range(0, len(sentences), 2):
        sentence = sentences[i].strip()
        punctuation = sentences[i + 1] if i + 1 < len(sentences) else ""
        
        if not sentence:
            continue
        
        full_sentence = sentence + punctuation
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—è—Ç—ã–º
        if ',' in sentence:
            parts = sentence.split(',')
            for j, part in enumerate(parts):
                part = part.strip()
                if not part:
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é –∫–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                if j < len(parts) - 1:
                    part += ','
                # –ö –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
                else:
                    part += punctuation
                
                result.append(part)
        else:
            result.append(full_sentence)
    
    return result


def normalize_text_for_speech(text):
    # –°–ª–æ–≤–∞—Ä—å –±–∞–∑–æ–≤—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ)
    abbreviations = {
        '–≥–≥.': '–≥–æ–¥–æ–≤',
        '—Ç.': '—Ç–æ–Ω–Ω', '—Ç/–≥–æ–¥': '—Ç–æ–Ω–Ω –≤ –≥–æ–¥',
        '–º–ª–Ω': '–º–∏–ª–ª–∏–æ–Ω–æ–≤', '–º–ª—Ä–¥': '–º–∏–ª–ª–∏–∞—Ä–¥–æ–≤', '—Ç—ã—Å.': '—Ç—ã—Å—è—á',
        '–∫–º.': '–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤', '–∫–º': '–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤', '–º.': '–º–µ—Ç—Ä–æ–≤',
        '—Ä—É–±.': '—Ä—É–±–ª–µ–π', '–†–§': '–†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏',
        '–ü–ê–û': '–ü—É–±–ª–∏—á–Ω–æ–µ –∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ', '–ê–û': '–ê–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ',
        '–û–û–û': '–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é', '–ù–ü–ó': '–Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥',
        '–ò–ù–ù': '–ò –ù –ù', '–û–ì–†–ù': '–û –ì –† –ù', '–§–ö–¶–ë': '–§ –ö –¶ –ë',
        '–¥.': '–¥–æ–º', '–∫–æ—Ä–ø.': '–∫–æ—Ä–ø—É—Å', '–ø–æ–º.': '–ø–æ–º–µ—â–µ–Ω–∏–µ', '—É–ª.': '—É–ª–∏—Ü–∞',
        '–Ω–∞–±.': '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è', '–æ–±–ª.': '–æ–±–ª–∞—Å—Ç—å', '—Ä-–Ω': '—Ä–∞–π–æ–Ω',
        '–ø—Ä-—Ç': '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø–µ—Ä.': '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–ª.': '–ø–ª–æ—â–∞–¥—å',
        '–æ—Ñ.': '–æ—Ñ–∏—Å', '—Å—Ç—Ä.': '—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—ç—Ç.': '—ç—Ç–∞–∂', '–∫–æ–º.': '–∫–æ–º–Ω–∞—Ç–∞',
        '¬∞C': '–≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—è', '¬∞F': '–≥—Ä–∞–¥—É—Å–æ–≤ –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞',
    }

    def roman_to_arabic(match):
        roman = match.group(0).upper()
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not roman or len(roman) == 0:
            return match.group(0)
        
        roman_values = {
            'I': 1, 'V': 5, 'X': 10, 'L': 50,
            'C': 100, 'D': 500, 'M': 1000
        }
        
        total = 0
        prev_value = 0
        
        for char in reversed(roman):
            value = roman_values.get(char, 0)
            if value < prev_value:
                total -= value
            else:
                total += value
            prev_value = value
        
        # –ï—Å–ª–∏ total = 0, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–µ —Ä–∏–º—Å–∫–æ–µ —á–∏—Å–ª–æ
        if total == 0:
            return match.group(0)
        
        return str(total)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text).strip()
    
    # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
    text = re.sub(r'‚Ä¢\s*', ';', text)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    phone_placeholder = "‚òéPHONE{}‚òé"
    phone_storage = []
    
    def format_phone(match):
        phone = match.group(0)
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø–ª—é—Å–∞
        cleaned = re.sub(r'[^\d+]', '', phone)
        
        if cleaned.startswith('+7') and len(cleaned) == 12:
            code = cleaned[2:5]
            first = cleaned[5:8]
            second = cleaned[8:10]
            third = cleaned[10:12]
            result = f"–ø–ª—é—Å 7 {code} {first} {second} {third}"
        elif cleaned.startswith('8') and len(cleaned) == 11:
            code = cleaned[1:4]
            first = cleaned[4:7]
            second = cleaned[7:9]
            third = cleaned[9:11]
            result = f"8 {code} {first} {second} {third}"
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ü–∏—Ñ—Ä–∞–º
            if cleaned.startswith('+'):
                result = '–ø–ª—é—Å ' + ' '.join(list(cleaned[1:]))
            else:
                result = ' '.join(list(cleaned))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder
        idx = len(phone_storage)
        phone_storage.append(result)
        return phone_placeholder.format(idx)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    text = re.sub(r'\+7\s*\(\d{3}\)\s*\d{3}[-\s]\d{2}[-\s]\d{2}', format_phone, text)
    text = re.sub(r'8[-\s]\d{3}[-\s]\d{3}[-\s]\d{2}[-\s]\d{2}', format_phone, text)
    

    # –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    text = re.sub(r'\b–≥–≥\.\s*', '–≥–æ–¥–æ–≤ ', text, flags=re.IGNORECASE)
    text = re.sub(r'\b–≥\.\s+(?=[–ê-–Ø–ÅA-Z])', '–≥–æ—Ä–æ–¥ ', text)
    for abbr, full in abbreviations.items():
        if abbr not in ['–≥–≥.']:
            pattern = r'\b' + re.escape(abbr) + r'\s*'
            text = re.sub(pattern, full + ' ', text, flags=re.IGNORECASE)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∏–º—Å–∫–∏—Ö —á–∏—Å–µ–ª
    text = re.sub(r'\b[IVXLCDM]+\b', roman_to_arabic, text, flags=re.IGNORECASE)
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö (—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ –¥–ª—è –¥–∞—Ç)
    ordinal_days = {
        '01': '–ø–µ—Ä–≤–æ–≥–æ', '02': '–≤—Ç–æ—Ä–æ–≥–æ', '03': '—Ç—Ä–µ—Ç—å–µ–≥–æ', '04': '—á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ',
        '05': '–ø—è—Ç–æ–≥–æ', '06': '—à–µ—Å—Ç–æ–≥–æ', '07': '—Å–µ–¥—å–º–æ–≥–æ', '08': '–≤–æ—Å—å–º–æ–≥–æ',
        '09': '–¥–µ–≤—è—Ç–æ–≥–æ', '10': '–¥–µ—Å—è—Ç–æ–≥–æ', '11': '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '12': '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ',
        '13': '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '14': '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '15': '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ',
        '16': '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '17': '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '18': '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ',
        '19': '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '20': '–¥–≤–∞–¥—Ü–∞—Ç–æ–≥–æ', '21': '–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ',
        '22': '–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ', '23': '–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ–≥–æ', '24': '–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ',
        '25': '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–≥–æ', '26': '–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç–æ–≥–æ', '27': '–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–¥—å–º–æ–≥–æ',
        '28': '–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å—å–º–æ–≥–æ', '29': '–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç–æ–≥–æ', '30': '—Ç—Ä–∏–¥—Ü–∞—Ç–æ–≥–æ',
        '31': '—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ'
    }
    
    ordinal_months = {
        '01': '—è–Ω–≤–∞—Ä—è', '02': '—Ñ–µ–≤—Ä–∞–ª—è', '03': '–º–∞—Ä—Ç–∞', '04': '–∞–ø—Ä–µ–ª—è',
        '05': '–º–∞—è', '06': '–∏—é–Ω—è', '07': '–∏—é–ª—è', '08': '–∞–≤–≥—É—Å—Ç–∞',
        '09': '—Å–µ–Ω—Ç—è–±—Ä—è', '10': '–æ–∫—Ç—è–±—Ä—è', '11': '–Ω–æ—è–±—Ä—è', '12': '–¥–µ–∫–∞–±—Ä—è'
    }
    
    ordinal_months_no_zero = {
        '1': '—è–Ω–≤–∞—Ä—è', '2': '—Ñ–µ–≤—Ä–∞–ª—è', '3': '–º–∞—Ä—Ç–∞', '4': '–∞–ø—Ä–µ–ª—è',
        '5': '–º–∞—è', '6': '–∏—é–Ω—è', '7': '–∏—é–ª—è', '8': '–∞–≤–≥—É—Å—Ç–∞',
        '9': '—Å–µ–Ω—Ç—è–±—Ä—è', '10': '–æ–∫—Ç—è–±—Ä—è', '11': '–Ω–æ—è–±—Ä—è', '12': '–¥–µ–∫–∞–±—Ä—è'
    }
    
    def day_to_ordinal(day_str):
        day = int(day_str)
        
        formatted_day = f"{day:02d}"
        return ordinal_days.get(formatted_day, day_str)
    
    def year_to_words(year_str):
        year = int(year_str)
        
        if year < 1000 or year > 9999:
            return year_str
        
        thousands = year // 1000
        hundreds = (year % 1000) // 100
        tens = (year % 100) // 10
        ones = year % 10
        
        result = []
        
        # –¢—ã—Å—è—á–∏
        thousands_words = {
            1: '–æ–¥–Ω–∞ —Ç—ã—Å—è—á–∞', 2: '–¥–≤–µ —Ç—ã—Å—è—á–∏', 3: '—Ç—Ä–∏ —Ç—ã—Å—è—á–∏',
            4: '—á–µ—Ç—ã—Ä–µ —Ç—ã—Å—è—á–∏', 5: '–ø—è—Ç—å —Ç—ã—Å—è—á', 6: '—à–µ—Å—Ç—å —Ç—ã—Å—è—á',
            7: '—Å–µ–º—å —Ç—ã—Å—è—á', 8: '–≤–æ—Å–µ–º—å —Ç—ã—Å—è—á', 9: '–¥–µ–≤—è—Ç—å —Ç—ã—Å—è—á'
        }
        if thousands > 0:
            result.append(thousands_words[thousands])
        
        # –°–æ—Ç–Ω–∏
        hundreds_words = {
            1: '—Å—Ç–æ', 2: '–¥–≤–µ—Å—Ç–∏', 3: '—Ç—Ä–∏—Å—Ç–∞', 4: '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞', 5: '–ø—è—Ç—å—Å–æ—Ç',
            6: '—à–µ—Å—Ç—å—Å–æ—Ç', 7: '—Å–µ–º—å—Å–æ—Ç', 8: '–≤–æ—Å–µ–º—å—Å–æ—Ç', 9: '–¥–µ–≤—è—Ç—å—Å–æ—Ç'
        }
        if hundreds > 0:
            result.append(hundreds_words[hundreds])
        
        # –î–µ—Å—è—Ç–∫–∏ –∏ –µ–¥–∏–Ω–∏—Ü—ã
        last_two = year % 100
        
        if 10 <= last_two <= 19:
            teens = {
                10: '–¥–µ—Å—è—Ç–æ–≥–æ', 11: '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', 12: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ',
                13: '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', 14: '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', 15: '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ',
                16: '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', 17: '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', 18: '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ',
                19: '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ'
            }
            result.append(teens[last_two])
        else:
            tens_words = {
                2: '–¥–≤–∞–¥—Ü–∞—Ç—å', 3: '—Ç—Ä–∏–¥—Ü–∞—Ç—å', 4: '—Å–æ—Ä–æ–∫', 5: '–ø—è—Ç—å–¥–µ—Å—è—Ç',
                6: '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', 7: '—Å–µ–º—å–¥–µ—Å—è—Ç', 8: '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', 9: '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'
            }
            if tens > 1:
                result.append(tens_words[tens])
            
            ones_ordinal = {
                1: '–ø–µ—Ä–≤–æ–≥–æ', 2: '–≤—Ç–æ—Ä–æ–≥–æ', 3: '—Ç—Ä–µ—Ç—å–µ–≥–æ', 4: '—á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ',
                5: '–ø—è—Ç–æ–≥–æ', 6: '—à–µ—Å—Ç–æ–≥–æ', 7: '—Å–µ–¥—å–º–æ–≥–æ', 8: '–≤–æ—Å—å–º–æ–≥–æ', 9: '–¥–µ–≤—è—Ç–æ–≥–æ'
            }
            if ones > 0:
                result.append(ones_ordinal[ones])
            elif tens == 0 and hundreds == 0:
                result.append('–≥–æ')
        
        return ' '.join(result)
    
    def format_date(match):
        day, month, year = match.groups()
        
        day_word = day_to_ordinal(day)
        month_word = ordinal_months.get(month) or ordinal_months_no_zero.get(month.lstrip('0'), month)
        year_word = year_to_words(year)
        
        return f", {day_word} {month_word} {year_word} –≥–æ–¥–∞,"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
    text = re.sub(r'(\d{1,2})\.(\d{1,2})\.(\d{4})\b', format_date, text)
    
    def format_short_date(match):
        day, month, year = match.groups()
        full_year = f"20{year}" if int(year) < 50 else f"19{year}"
        
        day_word = day_to_ordinal(day)
        month_word = ordinal_months.get(month) or ordinal_months_no_zero.get(month.lstrip('0'), month)
        year_word = year_to_words(full_year)
        
        return f", {day_word} {month_word} {year_word} –≥–æ–¥–∞,"
    
    text = re.sub(r'(\d{1,2})\.(\d{1,2})\.(\d{2})(?!\d)', format_short_date, text)
    
    def format_email(match):
        email = match.group(0)
        email = email.replace('@', ' —Å–æ–±–∞–∫–∞ ')
        email = email.replace('.', ' —Ç–æ—á–∫–∞ ')
        return email
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º email
    text = re.sub(r'\S+@\S+\.\S+', format_email, text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    text = re.sub(r'(\d+)\s*%', r'\1 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –î–õ–ò–ù–ù–´–• —á–∏—Å–µ–ª –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤ (7+ —Ü–∏—Ñ—Ä)
    long_number_placeholder = "üî¢NUM{}üî¢"
    long_number_storage = []
    
    def format_long_number(match):
        number_str = match.group(0)
        length = len(number_str)
        
        if length < 7:
            return number_str
        
        parts = []
        
        while len(number_str) > 0:
            if len(number_str) <= 2:
                parts.insert(0, number_str)
                break
            elif len(number_str) == 3:
                parts.insert(0, number_str)
                break
            else:
                parts.insert(0, number_str[-3:])
                number_str = number_str[:-3]
        
        result = ' '.join(parts)
        
        idx = len(long_number_storage)
        long_number_storage.append(result)
        return long_number_placeholder.format(idx)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤
    text = re.sub(r'\b\d{7,}\b', format_long_number, text)
    
    def format_large_number(match):
        number_str = match.group(0).replace(' ', '')
        
        if len(number_str) > 15:
            return match.group(0)
        
        try:
            number = int(number_str)
        except ValueError:
            return match.group(0)
        
        if number >= 1000000000:
            billions = number // 1000000000
            remainder = number % 1000000000
            result = f"{billions} –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤"
            if remainder > 0:
                result += f" {remainder}"
            return result
        elif number >= 1000000:
            millions = number // 1000000
            remainder = number % 1000000
            result = f"{millions} –º–∏–ª–ª–∏–æ–Ω–æ–≤"
            if remainder > 0:
                result += f" {remainder}"
            return result
        elif number >= 1000:
            thousands = number // 1000
            remainder = number % 1000
            result = f"{thousands} —Ç—ã—Å—è—á"
            if remainder > 0:
                result += f" {remainder}"
            return result
        
        return match.group(0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (–º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –≤–Ω—É—Ç—Ä–∏)
    text = re.sub(r'\d+(?:\s+\d+)+', format_large_number, text)
    
    def format_decimal(match):
        whole = match.group(1)
        fractional = match.group(2)
        
        whole_words = {
            '0': '–Ω–æ–ª—å', '1': '–æ–¥–Ω–∞', '2': '–¥–≤–µ', '3': '—Ç—Ä–∏',
            '4': '—á–µ—Ç—ã—Ä–µ', '5': '–ø—è—Ç—å', '6': '—à–µ—Å—Ç—å', '7': '—Å–µ–º—å',
            '8': '–≤–æ—Å–µ–º—å', '9': '–¥–µ–≤—è—Ç—å', '10': '–¥–µ—Å—è—Ç—å'
        }
        
        if len(fractional) == 1:
            frac_words = {
                '1': '–æ–¥–Ω–∞ –¥–µ—Å—è—Ç–∞—è', '2': '–¥–≤–µ –¥–µ—Å—è—Ç—ã—Ö', '3': '—Ç—Ä–∏ –¥–µ—Å—è—Ç—ã—Ö',
                '4': '—á–µ—Ç—ã—Ä–µ –¥–µ—Å—è—Ç—ã—Ö', '5': '–ø—è—Ç—å –¥–µ—Å—è—Ç—ã—Ö', '6': '—à–µ—Å—Ç—å –¥–µ—Å—è—Ç—ã—Ö',
                '7': '—Å–µ–º—å –¥–µ—Å—è—Ç—ã—Ö', '8': '–≤–æ—Å–µ–º—å –¥–µ—Å—è—Ç—ã—Ö', '9': '–¥–µ–≤—è—Ç—å –¥–µ—Å—è—Ç—ã—Ö',
            }
            return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö {frac_words.get(fractional, fractional + ' –¥–µ—Å—è—Ç—ã—Ö')}"
        elif len(fractional) == 2:
            frac_int = int(fractional)
            if frac_int == 1:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö –æ–¥–Ω–∞ —Å–æ—Ç–∞—è"
            elif frac_int == 2:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö –¥–≤–µ —Å–æ—Ç—ã—Ö"
            elif 3 <= frac_int <= 4:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö {fractional} —Å–æ—Ç—ã—Ö"
            elif 5 <= frac_int <= 20:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö {fractional} —Å–æ—Ç—ã—Ö"
            elif frac_int == 21:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö –¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–Ω–∞ —Å–æ—Ç–∞—è"
            elif frac_int == 22:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö –¥–≤–∞–¥—Ü–∞—Ç—å –¥–≤–µ —Å–æ—Ç—ã—Ö"
            else:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö {fractional} —Å–æ—Ç—ã—Ö"
        elif len(fractional) == 3:
            frac_int = int(fractional)
            if frac_int == 1:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö –æ–¥–Ω–∞ —Ç—ã—Å—è—á–Ω–∞—è"
            elif frac_int == 2:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö –¥–≤–µ —Ç—ã—Å—è—á–Ω—ã—Ö"
            else:
                return f"{whole_words.get(whole, whole)} —Ü–µ–ª—ã—Ö {fractional} —Ç—ã—Å—è—á–Ω—ã—Ö"
        
        return match.group(0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏ —Å –∑–∞–ø—è—Ç–æ–π
    text = re.sub(r'(\d+),(\d+)', format_decimal, text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å –≥–æ–¥–æ–º –≤ –∫–æ–Ω—Ü–µ
    text = re.sub(r'\b–≥\.\s*(?!\s*[–ê-–Ø–ÅA-Z])', '–≥–æ–¥–∞ ', text, flags=re.IGNORECASE)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    text = text.replace('‚Ññ', '–Ω–æ–º–µ—Ä ')
    text = text.replace('¬ß', '–ø–∞—Ä–∞–≥—Ä–∞—Ñ ')
    
    for symbol in '"¬´¬ª\'`‚Äî‚Äì':
        text = text.replace(symbol, '')

    text = text.replace(';', ',')
    text = text.replace('(', ', ')
    text = text.replace(')', ', ')
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    text = re.sub(r'([.,;:!?])\s*', r'\1 ', text)

    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
    text = re.sub(r',\s*,+', ',', text)
    
    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text).strip()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞
    for idx, num in enumerate(long_number_storage):
        text = text.replace(long_number_placeholder.format(idx), num)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    for idx, phone in enumerate(phone_storage):
        text = text.replace(phone_placeholder.format(idx), phone)
    
    def replace_leading_zeros(match):
        number = match.group(0)
        if number.startswith('0'):
            result = []
            for char in number:
                if char == '0':
                    result.append('–Ω–æ–ª—å')
                else:
                    remaining = number[len(result):]
                    result.append(remaining)
                    break
            else:
                return ' '.join(result)
            
            return ' '.join(result)
        return number
    
    text = re.sub(r'\b0\d*\b', replace_leading_zeros, text)
    
    return text


def text_to_speech_streaming(text):
    if not text or not text.strip():
        raise ValueError("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    normalized_text = normalize_text_for_speech(text)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = get_model()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = split_text_into_sentences(normalized_text)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    for i, sentence in enumerate(sentences):
        if not sentence.strip():
            continue
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as tmp:
            temp_path = tmp.name
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            reference_wav_path = settings.TTS_CONFIG.get("REFERENCE_WAV_PATH", os.path.abspath(os.path.join(settings.BASE_DIR, 'docs', 'audio.wav')))
            speaker = settings.TTS_CONFIG.get("SPEAKER", "Aaron Dreschner")
            language = settings.TTS_CONFIG.get("LANGUAGE", "ru")

            if not os.path.exists(reference_wav_path):
                model.tts_to_file(
                    text=sentence,
                    file_path=temp_path,
                    speaker=speaker,
                    language=language,
                )
            else:
                model.tts_to_file(
                    text=sentence,
                    file_path=temp_path,
                    speaker_wav=reference_wav_path,
                    language=language,
                )
            
            # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ
            audio = AudioSegment.from_wav(temp_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            audio.export(buffer, format='wav')
            audio_data = buffer.getvalue()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            yield audio_data
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(temp_path):
                    os.remove(temp_path)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
